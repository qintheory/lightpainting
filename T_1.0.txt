// Feather9x_TX
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client (transmitter)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example Feather9x_RX

#include <SPI.h>
#include <RH_RF95.h>

// for feather m0  
#define RFM95_CS  10
#define RFM95_RST 11
#define RFM95_IRQ 6

/*
#if defined(ESP32)    // ESP32 feather w/wing
  #define RFM95_RST     27   // "A"
  #define RFM95_CS      33   // "B"
  #define RFM95_IRQ     12   //  next to A
#endif
*/

// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 433.0

#ifdef __AVR__
  #include <avr/power.h>
#endif

// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS, RFM95_IRQ);

/*----switches setup----*/ 
// three analog read pins
#define PIN_SWITCH1 9
#define PIN_SWITCH2 5
#define PIN_SWITCH3 13
#define PIN_SWITCH4 12


/*  define pins of potentiometers  */
//int sensorValue_1 = analogRead(A0);
//int sensorValue_2 = analogRead(A1);
//int sensorValue_3 = analogRead(A2);

void setup() 
{
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);

  Serial.begin(115200);
  while (!Serial) {
    delay(1);
  }

  delay(100);

  Serial.println("Feather LoRa TX Test!");

  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    while (1);
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);
  
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then 
  // you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);
}

int16_t packetnum = 0;  // packet counter, we increment per xmission

void loop()
{

int sensorValue_1 = analogRead(A0);
int sensorValue_2 = analogRead(A1);
int sensorValue_3 = analogRead(A2);
  
  //display value of each potentiometer
  Serial.println(sensorValue_1);
  Serial.println(sensorValue_2);
  Serial.println(sensorValue_3);
  
  delay(1000); // Wait 1 second between transmits, could also 'sleep' here!
  
  Serial.println("Transmitting..."); // Send a message to rf95_server

  //test send int
  // uint8_t radiopacket[]={5,6,6,1,5,2};

  //convert value of potentiometer to string
  //char buf_test[100];

  //combine 3 values into a packet of string for transfering

 
  char radiopacket[120];
 // sprintf(radiopacket, "%d,%d,%d", 1024, 1024, 1024);
  sprintf(radiopacket, "%d,%d,%d", sensorValue_1, sensorValue_2,sensorValue_3);
  // char * radiopacket=mergeValues(sensorValue_1,sensorValue_2,sensorValue_3);
  
  Serial.println("Sending...");
  delay(10);
  int test_size=sizeof(radiopacket);
  Serial.println(radiopacket);
  Serial.println(test_size);
  int testlen=strlen(radiopacket);
  Serial.print("strlen:"); Serial.println(testlen);
  rf95.send((uint8_t *)radiopacket, 20);
  

  Serial.println("Waiting for packet to complete..."); 
  delay(10);
  rf95.waitPacketSent();
  
  // Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);
  Serial.println("Waiting for reply...");
  if (rf95.waitAvailableTimeout(1000))
  { 
    // Should be a reply message for us now   
    if (rf95.recv(buf, &len))
   {
      Serial.print("Got reply: ");
      Serial.println((char*)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);    
    }
    else
    {
      Serial.println("Receive failed");
    }
  }
  else
  {
    Serial.println("No reply, is there a listener around?");
  }

}

//merge three input values into a string with commas
char * mergeValues(int value1, int value2, int value3)
{
// transfer value1 to a string
char str1[120];
itoa(value1, str1, 10);

// transfer value2 to a string
char str2[10];
itoa(value2, str2, 10);

// transfer value3 to a string
char str3[10];
itoa(value3, str3, 10);

// add a comma to the string
strcat(str1, ",");
strcat(str1, str2);

//add 2nd comma to the string
strcat(str1, ",");
strcat(str1, str3);

return str1;
}


/*
char* converToChar(int n) {
char* str;
sscanf(str,"%d",&n);
return str;
}*/