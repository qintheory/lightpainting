// Feather9x_TX
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client (transmitter)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example Feather9x_RX

#include <Adafruit_NeoPixel.h> 
#include <Wire.h>
#include <SPI.h>
#include <RH_RF95.h>


/*-------RadioHead-------*/
#define RFM95_CS      10   // "B"
#define RFM95_RST     11   // "A"
#define RFM95_IRQ     6    // "D"

// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 433.0

#ifdef __AVR__
  #include <avr/power.h>
#endif


/*-------NeoPixel-------*/
// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
// Assign pins on Feather M0 to each group of NeoPixels
#define PIN_left            5
#define PIN_bottom          9
#define PIN_top             13
#define PIN_right           12

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      2

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
// Define each group of pixels as an instance of Adafruit_NeoPixel. Boards uposition of USB INPUT is top, going clockwize.
Adafruit_NeoPixel pixels_l = Adafruit_NeoPixel(NUMPIXELS, PIN_left, NEO_RGB + NEO_KHZ400);
Adafruit_NeoPixel pixels_b = Adafruit_NeoPixel(NUMPIXELS, PIN_bottom, NEO_RGB + NEO_KHZ400);
Adafruit_NeoPixel pixels_t = Adafruit_NeoPixel(NUMPIXELS, PIN_top, NEO_RGB + NEO_KHZ400);
Adafruit_NeoPixel pixels_r = Adafruit_NeoPixel(NUMPIXELS, PIN_right, NEO_RGB + NEO_KHZ400);

//define intervals of blink 
int delayval = 5; // 50 microseconds

//define a RGB value;
unsigned int r_g_b[3]={50,0,0};

//define different speeds of blink
int blink_speed[5]={0,1,2,3,4};

// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS, RFM95_IRQ);


void setup() 
{

  /******** Radio Setup ******/
  //pinMode(LED, OUTPUT);     
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);

  // This initializes the NeoPixel library.
  pixels_l.begin(); 
  pixels_b.begin(); 
  pixels_t.begin(); 
  pixels_r.begin(); 


  pixels_l.clear(); 
  pixels_b.clear(); 
  pixels_t.clear(); 
  pixels_r.clear(); 

  
  while (!Serial);
  Serial.begin(11520);
  delay(100);

  Serial.println("Feather LoRa RX Test!");
  
  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    while (1);
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);

  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then 
  // you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);


}

void loop()
{
  
  //   changeColours(700,400);
    //  blinking(700,700);
  if (rf95.available())
  {
    // Should be a message for us now   
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);

    //receive data 
    if (rf95.recv(buf, &len))
    {
     // digitalWrite(LED, HIGH);
      //RH_RF95::printBuffer("Received: ", buf, len);
      Serial.print("Got: ");
      Serial.println((char*)buf);

      char parameters[3][120];
      
      split(parameters,(char*) buf,",");
      for(int i = 0; i < 3; i++) {
        Serial.print("Param "); 
        Serial.print(i); 
        Serial.print(" is "); 
        Serial.println(parameters[i]);
       }
     
      // 1.handle first parameter - change color of neopixel 
      int p0=converToInt(parameters[0]);
      Serial.print(" p0 "); 
        Serial.println(p0);

      // 2.handle second parameter - assign how many groups to blink
      int p1=converToInt(parameters[1]);
      Serial.print(" p1 "); 
      Serial.println(p1);
      
      // 3.handle third parameter - assign speed of blink
      int p2=converToInt(parameters[2]);
      Serial.print(" p2 "); 
      Serial.println(p2);

     

      changeColours(p0,p1);
      blinking(p0,p2);
      /*-------------------------------radio-----------------------------------*/
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);


      // Send a reply
      uint8_t data[] = "And hello back to you";
      rf95.send(data, sizeof(data));
      rf95.waitPacketSent();
      Serial.println("Sent a reply");
    }
    else
    {
      Serial.println("Receive failed");
    }

  } 
}


//split buf by comma
void split( char (*parameters)[120], char* buf, const char* sep) {
  int i = 0;
  char *p;
  p = strtok(buf, sep);
  while(p) {
    strcpy(parameters[i], p);
    p = strtok(NULL, sep);
    i++;
  } 
}


//convert value from potentiometer into RGB array value
void convertToRGB(int p1,unsigned int* rgb) {
  int r = 0;
  int g = 0;
  int b = 0;
  if (0 <= p1 && p1 < 205) { // darkeness -> red
    if (p1 <= 8) {
      r = 0;
    } else {
      r = (int) (255.0 / 205 * p1);
    }
  } else if (205 <= p1 && p1 < 410) {  // red -> yellow
    r = 255;
    g = (int) (255.0 / (410 - 205) * (p1 - 205));
  } else if (410 <=p1 && p1 < 615) {  // yellow -> green
    r = 255 - (int) (255.0 / (615 - 410) * (p1 - 410));
    g = 255;
  } else if (615 <=p1 && p1 < 820) { // green -> blue
    g = 255 - (int) (255.0 / (820 - 615) * (p1 - 615));
    b = (int) (255.0 / (820 - 615) * (p1 - 615));
  } else {  // blue -> purple
    r = (int) (255.0 / (1023 - 820) * (p1 - 820));
    b = 255;
  }
  
  rgb[0] = r;
  rgb[1] = g;
  rgb[2] = b;
  Serial.println(" convertToRGB "); 
  
}

//convert string to int
int converToInt(char* str) {
int n;
sscanf(str,"%d",&n);
return n;
}

void innerRGB(int p1) {

  convertToRGB(p1, r_g_b);
  pixels_l.setPixelColor(0,r_g_b[0],r_g_b[1],r_g_b[2]);        
  pixels_l.show(); 
  pixels_b.setPixelColor(0,r_g_b[0],r_g_b[1],r_g_b[2]);
  pixels_b.show(); 
  pixels_t.setPixelColor(0,r_g_b[0],r_g_b[1],r_g_b[2]); 
  pixels_t.show(); 
  pixels_r.setPixelColor(0,r_g_b[0],r_g_b[1],r_g_b[2]); 
  pixels_r.show(); 
  Serial.println(" innerRGB "); 
  Serial.println(p1); 
  }

void outerRGB(int p1) {
  convertToRGB(p1, r_g_b);
  Serial.print(" outerRGB ");
  pixels_l.setPixelColor(1,r_g_b[0],r_g_b[1],r_g_b[2]);        
  pixels_l.show(); 
  pixels_b.setPixelColor(1,r_g_b[0],r_g_b[1],r_g_b[2]);
  pixels_b.show(); 
  pixels_t.setPixelColor(1,r_g_b[0],r_g_b[1],r_g_b[2]); 
  pixels_t.show(); 
  pixels_r.setPixelColor(1,r_g_b[0],r_g_b[1],r_g_b[2]); 
  pixels_r.show(); 
}

//not sure the input of the functions
void turnOffInner() {
  pixels_l.setPixelColor(0,0);      
  pixels_l.show(); 
  pixels_b.setPixelColor(0,0);      
  pixels_b.show(); 
  pixels_r.setPixelColor(0,0);      
  pixels_r.show(); 
  pixels_t.setPixelColor(0,0);      
  pixels_t.show(); 
}

void turnOffOuter() {
  pixels_l.setPixelColor(1,0);      
  pixels_l.show(); 
  pixels_b.setPixelColor(1,0);      
  pixels_b.show(); 
  pixels_r.setPixelColor(1,0);      
  pixels_r.show(); 
  pixels_t.setPixelColor(1,0);      
  pixels_t.show(); 
}

void changeColours(int p0, int p1) {
// the inputs are p1 and p2
  Serial.print(" changeColours "); 
  Serial.println(p1);
  if (p0 >= 0 && p0 <=200)
  {
    Serial.println(p1);
    innerRGB(p1);
    turnOffOuter();
  }
  else if (p0 >200 && p0 <=300)
  {
    Serial.println(p1);
    outerRGB(p1*0.5);
    innerRGB(p1;
  }
  else if (p0 >300 && p0 <= 500)
  {
   // int c = map(p0, 512, 1023, 1, 10);
   // p1 = p1/c; 
    Serial.println(p1);
    outerRGB(p1*0.8);
    innerRGB(p1);
  }
  else if (p0 >600 && p0 <= 800)
  {
   // int c = map(p0, 512, 1023, 1, 10);
   // p1 = p1/c; 
    Serial.println(p1);
    outerRGB(p1);
    innerRGB(p1*0.8);
  }

  else if (p0 >800 && p0 <= 1000)
  {
   // int c = map(p0, 512, 1023, 1, 10);
   // p1 = p1/c; 
    Serial.println(p1);
    outerRGB(p1);
    innerRGB(p1*0.5);
  }
  else if (p0 >1000 && p0 <=1023)
  {
   // int c = map(p0, 512, 1023, 1, 10);
   // p1 = p1/c; 
    Serial.println(p1);
    outerRGB(p1);
    turnOffInner();
  }
  else
  {
    innerRGB(p1);
    outerRGB(p1);
  }
}

void blinking(int p0,int p2){
  // the inputs are p1 and p2
  Serial.print(" blinking "); 
  Serial.println(p2);
  if (p0 >= 0 && p0 <=400)
  {
    p2 = map(p2, 4, 1023, 0, 100);
    Serial.println(p2);
    if(p2<6){
    delay(delayval*p2*3.16);//delay for on status
    turnOffInner();
    delay(delayval*p2);//delay for off status
    }
  }
  else if (p0 >611 && p0 <=1023)
  {
    p2 = map(p2, 4, 1023, 0, 100);
    Serial.println(p2);
    if(p2<6){
    delay(delayval*p2*3.16);
    turnOffOuter();
    delay(delayval*p2);
    }
  }
 else
  {
    p2 = map(p2, 4, 1023, 0, 100);
    Serial.println(p2);
    if(p2<6){
    delay(delayval*p2*3.16);
    turnOffOuter();
    turnOffInner();
    delay(delayval*p2);
    }
    
  }
}


